from fastapi import FastAPI, Depends, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy.orm import Session
from typing import List
import logging

from . import models, schemas
from .database import engine, get_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
models.Base.metadata.create_all(bind=engine)

app = FastAPI(title="Simple App API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://frontend:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ Starting Simple App API")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    db = next(get_db())
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
    existing_count = db.query(models.Item).count()
    
    if existing_count == 0:
        logger.info("üìù Creating initial test data")
        test_items = [
            models.Item(caption="–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å"),
            models.Item(caption="–í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å"),
            models.Item(caption="–¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å"),
            models.Item(caption="–ß–µ—Ç–≤–µ—Ä—Ç–∞—è –∑–∞–ø–∏—Å—å"),
            models.Item(caption="–ü—è—Ç–∞—è –∑–∞–ø–∏—Å—å"),
        ]
        
        for item in test_items:
            db.add(item)
        
        db.commit()
        logger.info(f"‚úÖ Created {len(test_items)} test items")
    else:
        logger.info(f"üìä Found {existing_count} existing items")

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç"""
    return {
        "message": "Simple App API", 
        "version": "1.0.0",
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "healthy", "service": "simple-app-api"}

@app.get("/api/items", response_model=schemas.ItemsResponse)
async def get_items(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã items"""
    try:
        items = db.query(models.Item).all()
        logger.info(f"üìä Retrieved {len(items)} items from database")
        
        return schemas.ItemsResponse(
            items=items,
            total=len(items)
        )
    except Exception as e:
        logger.error(f"‚ùå Error retrieving items: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.post("/api/items", response_model=schemas.Item)
async def create_item(
    item: schemas.ItemCreate, 
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    try:
        db_item = models.Item(caption=item.caption)
        db.add(db_item)
        db.commit()
        db.refresh(db_item)
        
        logger.info(f"‚úÖ Created new item: {db_item.caption}")
        return db_item
    except Exception as e:
        logger.error(f"‚ùå Error creating item: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.delete("/api/items/{item_id}")
async def delete_item(item_id: int, db: Session = Depends(get_db)):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    try:
        item = db.query(models.Item).filter(models.Item.id == item_id).first()
        
        if not item:
            raise HTTPException(status_code=404, detail="Item not found")
        
        db.delete(item)
        db.commit()
        
        logger.info(f"üóëÔ∏è Deleted item with ID: {item_id}")
        return {"message": "Item deleted successfully"}
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error deleting item: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

@app.get("/api/items/{item_id}", response_model=schemas.Item)
async def get_item(item_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    try:
        item = db.query(models.Item).filter(models.Item.id == item_id).first()
        
        if not item:
            raise HTTPException(status_code=404, detail="Item not found")
        
        return item
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Error retrieving item: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
