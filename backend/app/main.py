from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="Simple App API", version="1.0.0")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ SQLAlchemy
class ItemCreate(BaseModel):
    caption: str

class Item(BaseModel):
    id: int
    caption: str

class ItemsResponse(BaseModel):
    items: List[Item]
    total: int

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
items_storage = [
    {"id": 1, "caption": "–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å"},
    {"id": 2, "caption": "–í—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—å"},
    {"id": 3, "caption": "–¢—Ä–µ—Ç—å—è –∑–∞–ø–∏—Å—å"},
]

@app.get("/")
async def root():
    return {"message": "Simple App API", "version": "1.0.0", "status": "running"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "simple-app-api"}

@app.get("/api/items", response_model=ItemsResponse)
async def get_items():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π"""
    logger.info(f"üìä Retrieved {len(items_storage)} items")
    return ItemsResponse(items=items_storage, total=len(items_storage))

@app.post("/api/items", response_model=Item)
async def create_item(item: ItemCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    new_id = max([i["id"] for i in items_storage], default=0) + 1
    new_item = {"id": new_id, "caption": item.caption}
    items_storage.append(new_item)
    
    logger.info(f"‚úÖ Created new item: {item.caption}")
    return new_item

@app.delete("/api/items/{item_id}")
async def delete_item(item_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    global items_storage
    items_storage = [item for item in items_storage if item["id"] != item_id]
    
    logger.info(f"üóëÔ∏è Deleted item with ID: {item_id}")
    return {"message": "Item deleted successfully"}

@app.get("/api/items/{item_id}", response_model=Item)
async def get_item(item_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    item = next((item for item in items_storage if item["id"] == item_id), None)
    if not item:
        return {"error": "Item not found"}
    return item

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)